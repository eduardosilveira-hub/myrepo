
// <copyright file="PostOperationsample_fundraiserCreate.cs" company="">
// Copyright (c) 2023 All Rights Reserved
// </copyright>
// <author></author>
// <date>9/21/2023 6:47:46 PM</date>
// <summary>Implements the PostOperationsample_fundraiserCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace Calendar
{

    /// <summary>
    /// PostOperationsample_fundraiserCreate Plugin.
    /// Fires when the following attributes are updated:
    /// ls_startdate
    /// </summary>    
    public class PostOperationsample_fundraiserCreate: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationsample_fundraiserCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information.</param>
        public PostOperationsample_fundraiserCreate(string unsecure, string secure)
            : base(typeof(PostOperationsample_fundraiserCreate))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// </remarks>
        protected override void ExecuteCdsPlugin(ILocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException($"No context: {nameof(localContext)}");
            }
            // Obtain the tracing service
            ITracingService tracingService = localContext.TracingService;
            try
            {
                tracingService.Trace($"Getting plugin execution context");
                // Obtain the execution context from the service provider.  
                IPluginExecutionContext context = (IPluginExecutionContext)localContext.PluginExecutionContext;

                tracingService.Trace($"Getting Service");
                // Obtain the organization service reference for web service calls.  
                IOrganizationService service = localContext.CurrentUserService;

                if (!context.InputParameters.Contains("Target"))
                    throw new InvalidPluginExecutionException($"No Entity as input parameters");

                if (context.InputParameters["Target"] is Entity)
                    throw new InvalidPluginExecutionException($"Input parameter is not of Entity type");

                Entity fundraiser = context.InputParameters["Target"] as Entity;
                if (!fundraiser.Attributes.Contains("sl_startdate"))
                {
                    tracingService.Trace($"Field sl_startdate not found");
                    return;
                }

                var mydate = (DateTime)fundraiser["sl_startdate"];
                tracingService.Trace($"Date on field: {mydate}");

                QueryScheduleRequest scheduleRequest = new QueryScheduleRequest
                {
                    ResourceId = new Guid(),
                    Start = DateTime.Now,
                    End = DateTime.Today.AddDays(7),
                    TimeCodes = new TimeCode[] { TimeCode.Unavailable }
                };
                QueryScheduleResponse scheduleResponse = (QueryScheduleResponse)service.Execute(scheduleRequest);

                // Verify if some data is returned for the availability of the current user
                if (scheduleResponse.TimeInfos.Length > 0)
                {
                    Console.WriteLine("Successfully queried the working hours of the current user.");
                }



            }
            // Only throw an InvalidPluginExecutionException.
            catch (Exception ex)
            {
                tracingService?.Trace("An error occurred executing Plugin Calendar.PostOperationsample_fundraiserCreate : {0}", ex.ToString());
                throw new InvalidPluginExecutionException("An error occurred executing Plugin Calendar.PostOperationsample_fundraiserCreate .", ex);
            }	
        }
    }
}
